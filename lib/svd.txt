    g:= x:= O;
    for i:= 1 step 1 until n do
    begin
         e[i]:=g; s:= 0 ; l:= i + 1 ;
         for i:= i step t until m d o s:= s +u[/', i ~ 2 ;
         if s < tol then g:= 0 else
         begin
               /:= u[i, i] ; g:= if [ < 0 then sqrt(s) else - - sqrt (s);
               h:=/Xg--s;            u[i,i]:= l - - g ;
               for j:= 1 step t until n d o
               begin
                    s:= 0;
                     for k:= i step t until m do s:= s + u [ k , i ] xu[k, j];
                    /:= s/h;
                    for k:= i step t until m d o u[k,/']:= u[k, i] + / x u [ k , i]
               end i
         end s;
           q[i]:= g; s:= O;
           for j:= t step 1 until n do s:= s + u[i, j]~2;
           if s < t 0 l then g:~- 0 else
           begin
                /:=    u[i, i + 1 ] ; g:= if / < O then sqrt(s) e l s e --sqrt(s);
                h:---/×g--s; u[i,i+i]:-~/--g;
                for i:= 1 step 1 until n do e[i]:= u[i, j]/h;
                for j := l step t until m do
                begin
                      S : - - O;
                      for k:= 1 step 1 until n d o s:= s + u [ i , k] ×u[i, kJ;
                      for k:= l step t until n d o u[j, k]:= u[i, k] +s×e[k]
              end i
           end s;
           y :=    abs(q[i]) +abs(e[i]);               if y > x then x:= y
     end i;

comment ;
     if withv then for i:= n step -- 1 until 1 d o
     begin
        if g # 0 then
        begin
                h:= u[i,i +l]             ×g;
                for j:= l step 1 until n do vEi, i]:=                 u[i, i]/h;
                for 1": = l step t until n d o
                 begin
                      s:----O;
                      for k:---- l step 1 until n d o s:=        s+u[i, k] ×v[k,i];
                      for k:= l step t until n d o          v[k, i]:= v[k, i] +s×v[k, i]
                 end i
           end g;
           for i:= l step 1 until n do vii, j] := vii, i]:= O;
           vii, i]:=1; g:=e[i]; l:= i
     end i;

comment ;
     if   withu then     for i :~ n step -- t until 1 do
     begin
           /:=i+I;         g:=q[i];
           for j :-= l step ! until n d o        u[i, i]   := O;
           if g 4= 0 then
           begin
                h:= u[i, i] ×g;
                for j := l step t until n do
               begin
                      s :~-: O;
                      for k:= l step 1 until m do s:= s +u[k, i] xu[k,/'];
                      1 := s/h;
                      for k:= i step t until m d o uEk, ]] :-~ u[k, ]] + / x u [ k ,   i]
              end ];
              for i:---- i step 1 until m do u[], i]:= u[], i]/g
         end g
         else for ]:----- i step / until m do u[j, i]:= O;
         u[i, ~:] := uEi, i] +1
      end i;
comment ;
    eps := eps X x;
    for k:= n step - - t until t do
    begin
         test / splitting:
               for l:= k step - - l until 1 d o
               begin
                  if abs (el1]) _<---eps then goto test / convergence;
                  if abs (q[1-- t]) ~_ eps then goto cancel1ation
               end l;

comment ;
      cancel1ation:
          c:=0; s:=t;              11:=I--1;
          for i:= l step 1 until k d o
          begin
               1 :=    s x e[i] ; e [i]:=   c x e [i] ;
              if abs (]) ~ eps then goto test / convergence;
              g:= q[i]; h:---- q[i]:= s q r t ( / x / + g x g ) ; c:---- g/h; s:= --i/h;
              if withu then for/":=--I step 1 until m d o
               begin
                  y:= u[l', l1]; z:= u[], i];
                  u[j, l1]:= y x c + z X s ; u[], i] :-~ -- y x s + z X c
               end i
           end i;
      test / convergence:
          z:= q[k] ; if l = k then goto convergence;

c o r n m e n t shift from b o t t o m 2 X 2 minor;
          x:__ el/I; y:---- q [ k - - t ] ; g:= e l k - - l ] ;   h:= e[k];
          /:= ((y--z) x(y +z) +(g--h) x(g +h))/(2xh x y); g:---- sqrt(/xt + l);
          /:= ((x --z) X (x + z) + h X ( y / ( if / < 0 then / - - g e l s e / +g) --h))/x;

comment ;
         c:~-~s:= 1;
         for i:= l + 1 step 1 until k do
Singular Value Decomposition and Least Squares Solutions. G. H. Golub et al.               413

       begin
           g:------eEi~; y:= q [ i ] ; h:= s x g ;        g:=c×g;
           e l i - - l ]:= z:= s q r t ( / x / + h × h ) ; c:-~ //z; s:= h/z;
           /:----x×c+g×s; g:=--x×s+g×c;                             h:=yxs;      y:=y×c;
           if withv then for j:= 1 step t until n d o
            begin
                x:= vEi, i - l J ;   z:= vEj, ¢1;
                v[ i , i - t ]:= x x c + z x s ; v[i,i]:= - x x s + z x c
            end i;
           q [i -- t ]:= z:= sqrt ( / X / + h x h) ; c:= / / z ; s:= h/z;
           /:=cxg+sxy;             x:------sxg+cxy;
           if withu then for j:= 1 step t until m do
            begin
                y:= u ~ j , i - - l ] ; z:=u[j, il;
                u [ i , i - l ~:= y x c + z x s ; u[i,i ]:= - y x s + z x c
          end i
       end i;
      eel]:= 0; e[k]:= / ;     qCk]:= x; goto test / splitting;
   convergence:
       if z < 0 then
       begin comment ;
           q[k]:= - - z ;
           if withv then for /:=   1 step t until n d o v[i, k~:= --vii, k]
      end z
   end k
end SVD;

procedure Minfit (m, n, p, eps, tol) trans: (ab) result: (q);
   value m, n, p, eps, tol ;
   i n t e g e r m, n, p;
   real eps, tol;
   array ab, q;
comment ;
begin
      i n t e g e r i, j, k, l, 11, nl, np ;
      real c, /, g,h,s, x, y,z;
      array e l l : n] ;
comment ;
     g:= x:= 0; n p:= n + p ;
     for i:= 1 step 1 until n do
      begin
         e[i]:=g; s:----0; l : - - - - i + 1 ;
           for j:= i step t until m d o s:= s +ab[i, i1~2;
           if s < tol then g:= 0 e l s e
           begin
             / := ab [i, i~ ; g:= if / < 0 then sqrt (s) e l s e - - sqrt (s) ;
             h:= ~×g--s; ab[i,i~:= l - - g ;
             for j:= l step i until np do
              begin
                      s:=0;
                      for k:= i step t until m d o s:= s+ab[k, i] ×ab[k, ~'];
                      /:= s/h;
                      for k:= i step 1 until m d o abEk, i]:= abe k, j] +/×abEk, i]
              end i
           end s;
           q[i]:= g; s:= 0;
           if i =< m then for j:= l step 1 until n d o s:=-s + ab[i, j]~2;
           if s < tol then g:= 0 e l s e
           begin
                / : - - ab[i, i + 1 l ;   g:= if / < 0 then sqrt(s) e l s e --sqrt(s);
                h:=/×g--s; ab[i,i+l1:=/--g;
                for j:= 1 step t until n d o e[j]:= abEi, i]/h;
                for ~':= l step t until m d o
                begin
                     s:= 0;
                     for k:= l step 1 until n d o s :-~ s +ab[~, k] ×ab~i, k];
                     for k:= l step t until n d o abEi, k]:= ab[~, k] +s×e[kl
              end i
           end s;
           y:= abs(q[i~) +abs(e[i~); if y > x then x:= y
      end i;
comment ;
      for i := n step -- t until t do
      begin
         if g 4:0 then
         begin
             h:= ab[i, i + 1 ] ×g;
                for i:= l step t until n d o abEi, i]:= ab[i, i]/h;
                for j:= l step t until n do
            begin
                 s:=0;
                 for k:= l step 1 until n d o s:= s +ab[i, k 1 ×ab[k, ~'];
                 for k:= l step 1 until n d o ab[k, Jl:= ab[k, j] +s×ab[k, i]
          end i
       end g;
       for j:= l step 1 until n do ab[i,            i] :~ ab[j, i]:= O;
       a b [ i , i ]:= 1 ; g:----el/I; l:= i
   end i;
   eps :-= eps X x; nl :-= n + 1 ;
   for i :---=m + 1 step t until n do
   for i :---=nl step 1 until np d o ab[i, ?']:= 0;

comment ;
     for k:---= n step - - 1 until t d o
   begin
      test / splitting:
           for l:= k step - - t until 1 do
           begin
                 if abe (el/I) < eps then goto test / convergence;
                 if abe (q[l -- t]) =< eps then goto cancdlation
           end l;
comment ;
       cancel1ation :
            c:=0; s:=t;         11:=l--1;
            for i:= l step t until k do
            begin
                1:= s x e [ i ] ; e[i]:= cxeEi];
                if abe(l) ~ eps then goto test / convergence;
                g:-= q[i]; q[i]:= h:= s q r t ( / × / + g × g ) ; c : - - g/h; s:= --//h;
                for j:= nl step 1 until np do
                begin
                      y:= ab[l1, j ] ; z:= ab[i, j];
                      ab[l1, i]:= c x y + s x z ;   ab[i,i]:= - - s x y + c × z
                end i
            end i;
       test / convergence:
           z:= q[k] ; if l = k then goto convergence;

comment ;
            x:=q[l]; y:= q [ k - - l ] ; g:=-e[k--t]; h:=e[k];
            /:---- ((y - - z ) x ( y +z) + ( g - - h ) x ( g + h ) ) l ( 2 x h x y ) ; g:= s q r t ( l x / + 1);
            /:= ((x--z) x ( x + z ) + h x ( y / ( if [ < 0 then / - - g e l s e / + g ) - - h ) ) / x ;

comment ;
            c:= s:= 1;
            for i:= 1 + 1 step t until k do
               begin
                   g:-~e[i]; y:= q [ i ] ; h:= s × g ; g:= c × g ;
                   eli - - t 1:= z:---- s q r t ( / × / + h × h ) ; c:----//z; s := h/z;
                   /:=x×c+g×s;                 g:=--x×s+g×c;                 h:=y×s;      y:~--yxc;
                   for j:= ~ step t until n d o
                   begin
                          x:= a b [ i , i - - l ] ; z:= abe',i];
                         a b [ i , i - - i ]:= x x c + z × s ; ab[i,i]:= - - x x s + z × c
                   end i;
                   q [ i - - t ]:= z:----- s q r t ( / x / + h x h ) ; c:= / / z ; s:= h/z;
                   /:=cxg+s×y;                     x:-~ - - s × g + c × y ;
                   for i:= n l step l until np d o
                   begin
                       y :-~ ab [i -- l, i] ; z:= ab [i, i] ;
                       a b [ i - - t , i ] := c × y + s x z ; ab[i, i]:= - - s × y + c × z
                  end i
             end i;
             e[l]:=-0; e[k]:= / ; q[k]:= x; goto test / splitting;
          convergence:
              if z < 0 then
              b e g i n comment ;
                   q[k] :-- --z;
                 for j:= 1 step t until n do ab[~, k]:= --ab[~, k]
              end z
   end k
end Min/it;
