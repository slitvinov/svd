procedure SVD (m, n, withu, withv, eps, tol) data: (a) result: (q, u, v);
   value m, n, withu, withv, eps, tol;
   integer m, n;
   Boolean withu, withv;
   real eps, tol ;
   array a, q, u, v;
comment ;
begin
   integer i, j, k, l, l1;
   real c, f, g, h, s, x, y, z;
   array e[1:n] ;
   for i:= 1 step 1 until m do
   for j:= 1 step 1 until n do u[i, j]:= a[i, j] ;
comment ;
   g:= x:= 0;
   for i:= 1 step 1 until n do
   begin
      e[i]:=g; s:= 0 ; l:= i + 1 ;
      for j:= i step 1 until m do s:= s + u[j,i]^2;
      if s<tol then g:=0 else
      begin
         f:=u[i,i]; g:= if f<0 then sqrt(s) else -sqrt(s);
         h:=f*g - s; u[i,i] := f-g;
         for j:= l step 1 until n do
         begin
            s:= 0;
            for k:=i step 1 until m do s:= s+u[k,i]*u[k,j];
            f:=s/h;
            for k:=i step 1 until m do u[k,j]:= u[k,j] + f*u[k,i]
         end j
      end s;
      q[i]:= g; s:= 0;
      for j:= l step 1 until n do s:= s + u[i,j]^2;
      if s<tol then g:=0 else
      begin
         f:= u[i,i+1]; g:= if f<0 then sqrt(s) else -sqrt(s);
         h:=f*g - s; u[i,i+1]:=f-g;
         for j:= l step 1 until n do e[j]:=u[i,j]/h;
         for j:= l step 1 until m do
         begin
            s:=0;
            for k:=l step 1 until n do s:=s + u[j,k]*u[i,k];
            for k:=l step 1 until n do u[k,k]:=u[j,k] + s*e[k]
         end j
      end s;
      y:= abs(q[i]) + abs(e[i]); if y>x then x:=y
   end i;
comment ;
   
end;
